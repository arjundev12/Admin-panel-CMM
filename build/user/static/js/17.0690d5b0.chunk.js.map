{"version":3,"sources":["views/cities/city.js"],"names":["City","useHistory","useState","total","setTotal","page","city","setCity","useParams","id","useEffect","loadcities","a","data","offset","limit","console","log","axios","post","CONSTANT","res","warn","code","toast","docs","onInputChange","e","item","target","name","status","value","_id","put","response","message","show","setShow","region","setRegion","regionName","setRegionName","cityName","setCityName","cityArray","setCityArray","handleClose","handleShow","csc","getStatesOfCountry","onInputChangeRegion","getCitiesOfState","getcitys","onInputChangeCity","onSubmit","preventDefault","className","to","variant","onClick","striped","bordered","hover","map","i","class","onChange","onHide","Header","closeButton","Title","isoCode","Footer"],"mappings":"4XA4LeA,UAjLF,WACOC,cAAhB,IADe,EAEuBC,mBAAS,IAFhC,gCAGWA,mBAAS,IAHpB,mBAGRC,EAHQ,KAGDC,EAHC,OAISF,mBAAS,GAJlB,mBAIRG,EAJQ,aAKWH,mBAAS,IALpB,gCAMSA,mBAAS,KANlB,mBAMRI,EANQ,KAMFC,EANE,KAOAC,cAAPC,GACRC,qBAAU,WACNC,EAAWN,KACZ,CAACA,EAAMF,IAEV,IAAMQ,EAAU,uCAAG,8BAAAC,EAAA,6DACTC,EAAO,CACTC,OAAQT,EACRU,MAAO,IAEXC,QAAQC,IAAI,WAAYJ,GALT,SAMGK,IAAMC,KAAN,UAAcC,IAAd,qBAAmDP,GANtD,UAMTQ,EANS,OAOfL,QAAQM,KAAK,UAAWD,EAAIR,KAAKA,MACZ,KAAjBQ,EAAIR,KAAKU,KARE,wBASXC,YAAM,yBATK,UAULpB,EAASiB,EAAIR,KAAKA,KAAKV,OAVlB,yBAWLI,EAAQc,EAAIR,KAAKA,KAAKY,MAXjB,gCAaXD,YAAM,uBAbK,4CAAH,qDAqBVE,EAAa,uCAAG,WAAOC,EAAGC,GAAV,iBAAAhB,EAAA,6DAClBI,QAAQM,KAAK,uBAAwBM,GACjCf,EAAO,GACU,UAAjBc,EAAEE,OAAOC,OACTjB,EAAKkB,OAASJ,EAAEE,OAAOG,OAG3BnB,EAAKoB,IAAML,EAAKK,IAPE,SAQGf,IAAMgB,IAAN,UAAad,IAAb,0BAAuDP,GAR1D,OASQ,MADtBsB,EARc,QASLtB,KAAKU,MACdC,YAAMW,EAAStB,KAAKuB,SACpBzB,EAAWN,IAEXmB,YAAM,uBAbQ,2CAAH,wDAjCJ,EAmDStB,oBAAS,GAnDlB,mBAmDRmC,EAnDQ,KAmDFC,EAnDE,OAoDapC,mBAAS,IApDtB,mBAoDRqC,EApDQ,KAoDAC,EApDA,OAqDqBtC,qBArDrB,mBAqDRuC,EArDQ,KAqDIC,EArDJ,OAsDiBxC,qBAtDjB,mBAsDRyC,EAtDQ,KAsDEC,EAtDF,OAuDmB1C,mBAAS,IAvD5B,mBAuDR2C,EAvDQ,KAuDGC,EAvDH,KAyDTC,EAAc,kBAAMT,GAAQ,IAE5BU,EAAU,uCAAG,4BAAApC,EAAA,6DACf0B,GAAQ,GADO,SAEEW,IAAIC,mBAAmB,MAFzB,cAEXrC,EAFW,gBAGT2B,EAAU3B,GAHD,2CAAH,qDAMVsC,EAAmB,uCAAG,WAAOxB,GAAP,eAAAf,EAAA,sEAElB8B,EAAcf,EAAEE,OAAOG,OAFL,uBAGHiB,IAAIG,iBAAiB,KAAMzB,EAAEE,OAAOG,OAHjC,cAGpBqB,EAHoB,gBAIlBP,EAAaO,GAJK,2CAAH,sDAOnBC,GAAiB,uCAAG,WAAO3B,GAAP,SAAAf,EAAA,sEAChBgC,EAAYjB,EAAEE,OAAOG,OADL,2CAAH,sDAGjBuB,GAAQ,uCAAG,WAAM5B,GAAN,iBAAAf,EAAA,6DACbe,EAAE6B,iBACE3C,EAAO,CACP8B,SAAUA,GAHD,SAMKzB,IAAMC,KAAN,UAAcC,IAAd,uBAAqDP,GAN1D,QAMPQ,EANO,QAOLR,KAAKU,KACTC,YAAMH,EAAIR,KAAKuB,SACfW,IACApC,EAAWN,GAVF,2CAAH,sDAmBd,OACI,gCACI,cAAC,IAAD,CAAMoD,UAAU,kBAAkBC,GAAG,aAArC,0BAGA,cAAC,IAAD,CAAQC,QAAQ,UAAUC,QAASZ,EAAnC,sBAGA,eAAC,IAAD,CAAOa,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACI,gCACI,+BACI,sCACA,sCACA,wCACA,8CAGR,gCAEQzD,EAAK0D,KAAI,SAACpC,EAAMqC,GAAP,OAAa,+BAClB,6BAAKA,EAAI,IACT,6BAAKrC,EAAKE,KAAOF,EAAKE,KAAO,OAC7B,6BAAI,yBAAQoC,MAAM,eAAepC,KAAK,SAASE,MAAOJ,EAAKG,OACvDoC,SAAU,SAAAxC,GAAC,OAAID,EAAcC,EAAGC,IADhC,UAEA,wBAAQI,MAAM,IAAd,oBACA,wBAAQA,MAAM,IAAd,2BAGJ,6BACI,cAAC,IAAD,CAAMyB,UAAU,wBAAwBC,GAAE,qBAAgB9B,EAAKK,KAA/D,gCAQpB,eAAC,IAAD,CAAOI,KAAMA,EAAM+B,OAAQrB,EAA3B,UACI,cAAC,IAAMsB,OAAP,CAAcC,aAAW,EAAzB,SACI,cAAC,IAAMC,MAAP,yBAEJ,sBAAKL,MAAM,MAAX,UACI,sBAAKA,MAAM,sBAAX,UACI,sDACA,wBAAQA,MAAM,eAAepC,KAAK,aAAaqC,SAAU,SAAAxC,GAAC,OAAIwB,EAAoBxB,IAAIK,MAAOS,EAA7F,SAEQF,EAAOyB,KAAI,SAACpC,EAAMqC,GAAP,OACP,wBAAQjC,MAAOJ,EAAK4C,QAApB,SAA+B5C,EAAKE,eAKpD,sBAAKoC,MAAM,sBAAX,UACI,qDACA,wBAAQA,MAAM,eAAepC,KAAK,WAAWqC,SAAU,SAAAxC,GAAC,OAAI2B,GAAkB3B,IAAIK,MAAOW,EAAzF,SAEQE,EAAUmB,KAAI,SAACpC,EAAMqC,GAAP,OACV,wBAAQjC,MAAOJ,EAAKE,KAApB,SAA4BF,EAAKE,kBAMrD,eAAC,IAAM2C,OAAP,WACI,cAAC,IAAD,CAAQd,QAAQ,YAAYC,QAASb,EAArC,mBAGA,cAAC,IAAD,CAAQY,QAAQ,UAAUC,QAAS,SAAAjC,GAAC,OAAI4B,GAAS5B,IAAjD,0BAKR,cAAC,IAAD","file":"static/js/17.0690d5b0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation, Link, useParams } from 'react-router-dom'\r\nimport axios from \"axios\";\r\nimport { Button, Table, Modal } from 'react-bootstrap'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport *as  CONSTANT from '../../constant'\r\nimport Pagination from '../pagination/pagination'\r\nimport '../../css/style.css'\r\nimport csc from 'country-state-city'\r\n\r\nconst City = () => {\r\n    const history = useHistory()\r\n    const [showPerPage, setShowPerPage] = useState(10);\r\n    const [total, setTotal] = useState(0);\r\n    const [page, setPage] = useState(1);\r\n    const [index, setIndex] = useState(1);\r\n    const [city, setCity] = useState([]);\r\n    const { id } = useParams();\r\n    useEffect(() => {\r\n        loadcities(page);\r\n    }, [page, total]);\r\n\r\n    const loadcities = async () => {\r\n        const data = {\r\n            offset: page,\r\n            limit: 10\r\n        }\r\n        console.log(\"requset0\", data)\r\n        const res = await axios.post(`${CONSTANT.baseUrl}/api/admin/cities`, data);\r\n        console.warn(\"respons\", res.data.data)\r\n        if (res.data.code == 200) {\r\n            toast(\"List get successfully\")\r\n            await setTotal(res.data.data.total)\r\n            await setCity(res.data.data.docs);\r\n        } else {\r\n            toast(\"somthing went wrong\")\r\n        }\r\n    };\r\n    const onPaginationChange = (start, end) => {\r\n        console.warn(\"getee, \", start, end)\r\n        setPage(start)\r\n        setIndex(end)\r\n    };\r\n    const onInputChange = async (e, item) => {\r\n        console.warn(\"oninput change data \", item)\r\n        let data = {}\r\n        if (e.target.name == 'status') {\r\n            data.status = e.target.value\r\n        }\r\n\r\n        data._id = item._id\r\n        let response = await axios.put(`${CONSTANT.baseUrl}/api/admin/update-city`, data);\r\n        if (response.data.code == 200) {\r\n            toast(response.data.message)\r\n            loadcities(page)\r\n        } else {\r\n            toast(\"somthing went wrong\")\r\n        }\r\n    }\r\n    //======================================modalcode==================================//\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [region, setRegion] = useState([]);\r\n    const [regionName, setRegionName] = useState();\r\n    const [cityName, setCityName] = useState()\r\n    const [cityArray, setCityArray] = useState([]);\r\n\r\n    const handleClose = () => setShow(false);\r\n\r\n    const handleShow = async () => {\r\n        setShow(true);\r\n        let data = await csc.getStatesOfCountry('IN')\r\n        await setRegion(data)\r\n    }\r\n\r\n    const onInputChangeRegion = async (e) => {\r\n\r\n        await setRegionName(e.target.value)\r\n        let getcitys = await csc.getCitiesOfState('IN', e.target.value)\r\n        await setCityArray(getcitys)\r\n    }\r\n\r\n    const onInputChangeCity = async (e) => {\r\n        await setCityName(e.target.value)\r\n    }\r\n    const onSubmit = async e => {\r\n        e.preventDefault();\r\n        let data = {\r\n            cityName: cityName\r\n        }\r\n\r\n        const res = await axios.post(`${CONSTANT.baseUrl}/api/admin/add-city`, data);\r\n        if (res.data.code == 200) {\r\n            toast(res.data.message)\r\n            handleClose()\r\n            loadcities(page);\r\n        } else {\r\n            toast(res.data.message)\r\n            handleClose()\r\n            loadcities(page);\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link className=\"btn btn-primary\" to=\"/dashboard\">\r\n                back to Home\r\n       </Link>\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                add city\r\n      </Button>\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>S.no</th>\r\n                        <th>Name</th>\r\n                        <th>Status</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        city.map((item, i) => <tr>\r\n                            <td>{i + 1}</td>\r\n                            <td>{item.name ? item.name : null}</td>\r\n                            <td><select class=\"form-control\" name=\"status\" value={item.status}\r\n                                onChange={e => onInputChange(e, item)}>\r\n                                <option value=\"1\">Active</option>\r\n                                <option value=\"0\">Inactive</option>\r\n                                {/* <option value=\"blocked\">Block</option> */}\r\n                            </select></td>\r\n                            <td>\r\n                                <Link className=\"btn btn-primary mr-2 \" to={`/view-city/${item._id}`}>view </Link>\r\n                                {/* <Link className=\"btn btn-primary mr-2\" to={`/wallet/customer/${item._id}`}> delete </Link> */}\r\n                                {/* <Link className=\"btn btn-primary \" to=\"/\"> delete</Link> */}\r\n                            </td>\r\n                        </tr>)\r\n                    }   \r\n                </tbody>\r\n            </Table>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Add City</Modal.Title>\r\n                </Modal.Header>\r\n                <div class=\"row\">\r\n                    <div class=\"form-group col-sm-6\">\r\n                        <label>Select State Name</label>\r\n                        <select class=\"form-control\" name=\"regionName\" onChange={e => onInputChangeRegion(e)} value={regionName}>\r\n                            {\r\n                                region.map((item, i) =>\r\n                                    <option value={item.isoCode} >{item.name}</option>\r\n                                )\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"form-group col-sm-6\">\r\n                        <label>Select City Name</label>\r\n                        <select class=\"form-control\" name=\"cityName\" onChange={e => onInputChangeCity(e)} value={cityName}>\r\n                            {\r\n                                cityArray.map((item, i) =>\r\n                                    <option value={item.name} >{item.name}</option>\r\n                                )\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n          </Button>\r\n                    <Button variant=\"primary\" onClick={e => onSubmit(e)}>\r\n                        Submit\r\n          </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <ToastContainer />\r\n            {/* <Pagination\r\n                showPerPage={showPerPage}\r\n                onPaginationChange={onPaginationChange}\r\n                total={total}\r\n                page={page}\r\n            /> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default City\r\n"],"sourceRoot":""}